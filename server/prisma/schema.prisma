generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User -> UserProfile = 1:1
// User -> article = 1:n
// User -> Comment = 1:n
// article -> Comment = 1:n
// article -> Tag = n:n

model User {
  id       String  @id @default(cuid()) @map("id")
  name     String  @map("name") @db.VarChar(50)
  email    String  @unique @map("email") @db.VarChar(100)
  password String  @map("password") @db.VarChar(255)
  isAdmin  Boolean @default(false) @map("is_admin") @db.Boolean()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  articles    Article[]
  comments    Comment[]
  userProfile UserProfile?

  @@map("users")
}

model UserProfile {
  id         String  @id @default(cuid()) @map("id")
  bio        String? @map("bio") @db.Text()
  proffesion String? @map("proffesion") @db.VarChar(50)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.VarChar(255)

  @@map("user_profiles")
}

model Article {
  id      String @id @default(cuid()) @map("id")
  title   String @map("title") @db.VarChar(100)
  content String @map("content") @db.Text()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @map("user_id") @db.VarChar(255)
  comments Comment[]
  tags     Tag[]

  @@map("articles")
}

model Comment {
  id      String @id @default(cuid()) @map("id")
  content String @map("content") @db.Text()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id") @db.VarChar(255)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String  @map("article_id") @db.VarChar(255)

  @@map("comments")
}

model Tag {
  id   String @id @default(cuid()) @map("id")
  name String @map("name") @db.VarChar(50)

  articles Article[]

  @@map("tags")
}
